/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dictionary;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sun.util.calendar.BaseCalendar.Date;

import java.text.ParseException;
import java.text.SimpleDateFormat;

/**
 *
 * @author Pham Tien
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //Phần xử lý giao diện
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        main = new javax.swing.JTabbedPane();
        btnTraCuu = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        btnVtoE = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNghiaVtoA = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtTuKhoaVtoA = new javax.swing.JTextField();
        btnTimKiemVtoA = new javax.swing.JButton();
        btnThichVtoA = new javax.swing.JButton();
        btnEtoV = new javax.swing.JPanel();
        txtTuKhoaAtoV = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnTimKiemAtoV = new javax.swing.JButton();
        btnThichAtoV = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNghiaAtoV = new javax.swing.JTextArea();
        btnThich = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtThich = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnDaTra = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cbNgayBD = new javax.swing.JComboBox();
        cbNgayKT = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnXem = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDaTra = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dictionary");
        setBackground(new java.awt.Color(204, 255, 204));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(365, 150));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(153, 255, 153));
        jPanel3.setDoubleBuffered(false);
        jPanel3.setName("tabTraCuu"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(600, 300));

        main.setBackground(new java.awt.Color(255, 255, 255));
        main.setForeground(new java.awt.Color(255, 255, 255));
        main.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        btnTraCuu.setBackground(new java.awt.Color(204, 255, 204));
        btnTraCuu.setPreferredSize(new java.awt.Dimension(450, 250));

        btnVtoE.setBackground(new java.awt.Color(204, 255, 204));
        btnVtoE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtNghiaVtoA.setColumns(20);
        txtNghiaVtoA.setRows(5);
        txtNghiaVtoA.setToolTipText("Đây là nơi hiển thị nghĩa và một số thông tin liên quan của từ cần tìm kiếm");
        txtNghiaVtoA.setEnabled(false);
        jScrollPane2.setViewportView(txtNghiaVtoA);

        jLabel2.setLabelFor(txtTuKhoaAtoV);
        jLabel2.setText("Từ:");

        txtTuKhoaVtoA.setToolTipText("Nhập từ để tìm kiếm");
        txtTuKhoaVtoA.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtTuKhoaVtoA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTuKhoaVtoAKeyPressed(evt);
            }
        });

        btnTimKiemVtoA.setText("Tìm kiếm");
        btnTimKiemVtoA.setToolTipText("Bấm vào đây để tìm kiếm");
        btnTimKiemVtoA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemVtoAActionPerformed(evt);
            }
        });

        btnThichVtoA.setText("Thêm vào thích");
        btnThichVtoA.setToolTipText("Bấm vào đây để tìm kiếm");
        btnThichVtoA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThichVtoAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnVtoELayout = new javax.swing.GroupLayout(btnVtoE);
        btnVtoE.setLayout(btnVtoELayout);
        btnVtoELayout.setHorizontalGroup(
            btnVtoELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnVtoELayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(btnVtoELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(btnVtoELayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTuKhoaVtoA, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTimKiemVtoA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnThichVtoA)))
                .addGap(18, 18, 18))
        );
        btnVtoELayout.setVerticalGroup(
            btnVtoELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnVtoELayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(btnVtoELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTuKhoaVtoA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiemVtoA)
                    .addComponent(btnThichVtoA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Vietnamese - English", btnVtoE);

        btnEtoV.setBackground(new java.awt.Color(204, 255, 204));
        btnEtoV.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtTuKhoaAtoV.setToolTipText("Nhập từ để tìm kiếm");
        txtTuKhoaAtoV.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtTuKhoaAtoV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTuKhoaAtoVKeyPressed(evt);
            }
        });

        jLabel3.setLabelFor(txtTuKhoaAtoV);
        jLabel3.setText("Từ:");

        btnTimKiemAtoV.setText("Tìm kiếm");
        btnTimKiemAtoV.setToolTipText("Bấm vào đây để tìm kiếm");
        btnTimKiemAtoV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemAtoVActionPerformed(evt);
            }
        });

        btnThichAtoV.setText("Thêm vào thích");
        btnThichAtoV.setToolTipText("Bấm vào đây để tìm kiếm");
        btnThichAtoV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThichAtoVActionPerformed(evt);
            }
        });

        txtNghiaAtoV.setColumns(20);
        txtNghiaAtoV.setRows(5);
        txtNghiaAtoV.setToolTipText("Đây là nơi hiển thị nghĩa và một số thông tin liên quan của từ cần tìm kiếm");
        txtNghiaAtoV.setEnabled(false);
        jScrollPane3.setViewportView(txtNghiaAtoV);

        javax.swing.GroupLayout btnEtoVLayout = new javax.swing.GroupLayout(btnEtoV);
        btnEtoV.setLayout(btnEtoVLayout);
        btnEtoVLayout.setHorizontalGroup(
            btnEtoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnEtoVLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(btnEtoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(btnEtoVLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTuKhoaAtoV, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTimKiemAtoV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnThichAtoV)))
                .addGap(18, 18, 18))
        );
        btnEtoVLayout.setVerticalGroup(
            btnEtoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnEtoVLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(btnEtoVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTuKhoaAtoV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiemAtoV)
                    .addComponent(btnThichAtoV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("English - Vietnamese", btnEtoV);

        javax.swing.GroupLayout btnTraCuuLayout = new javax.swing.GroupLayout(btnTraCuu);
        btnTraCuu.setLayout(btnTraCuuLayout);
        btnTraCuuLayout.setHorizontalGroup(
            btnTraCuuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnTraCuuLayout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        btnTraCuuLayout.setVerticalGroup(
            btnTraCuuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnTraCuuLayout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        main.addTab("Tra cứu", btnTraCuu);

        btnThich.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                btnThichAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        txtThich.setColumns(20);
        txtThich.setLineWrap(true);
        txtThich.setRows(5);
        txtThich.setToolTipText("");
        txtThich.setEnabled(false);
        jScrollPane1.setViewportView(txtThich);

        jLabel1.setText("Danh sách các từ yêu thích:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout btnThichLayout = new javax.swing.GroupLayout(btnThich);
        btnThich.setLayout(btnThichLayout);
        btnThichLayout.setHorizontalGroup(
            btnThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        btnThichLayout.setVerticalGroup(
            btnThichLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        main.addTab("Từ yêu thích", btnThich);

        btnDaTra.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                btnDaTraAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        cbNgayBD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbNgayKT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Từ ngày:");

        jLabel5.setText("Đến ngày:");

        btnXem.setText("Xem");
        btnXem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemActionPerformed(evt);
            }
        });

        txtDaTra.setColumns(20);
        txtDaTra.setRows(5);
        txtDaTra.setEnabled(false);
        jScrollPane4.setViewportView(txtDaTra);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbNgayBD, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cbNgayKT, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXem)))
                .addGap(39, 39, 39))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNgayBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNgayKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(btnXem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout btnDaTraLayout = new javax.swing.GroupLayout(btnDaTra);
        btnDaTra.setLayout(btnDaTraLayout);
        btnDaTraLayout.setHorizontalGroup(
            btnDaTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        btnDaTraLayout.setVerticalGroup(
            btnDaTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        main.addTab("Các từ đã tra cứu", btnDaTra);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(main)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, 614, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ListWord listAV = new ListWord();
    ListWord listVA = new ListWord();
    ListWord listLikeAV = new ListWord();
    ListWord listLikeVA = new ListWord();
    ListWord listStatisticAV = new ListWord();
    ListWord listStatisticVA = new ListWord();

    //Sự kiện bấm nút tìm kiếm Vietnamese - English
    private void btnTimKiemVtoAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemVtoAActionPerformed
        try {
            listStatisticVA.readFile("./ThongKe/ThongKe.txt", 1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        int size = listStatisticVA.getSize();

        String sNghia;
        Word wTuCanTim = new Word();
        txtNghiaVtoA.setLineWrap(true);
        String sTuKhoa = txtTuKhoaVtoA.getText();
        wTuCanTim = listVA.findWord(sTuKhoa);
        if (wTuCanTim == null) {
            sNghia = "Không tìm thấy nghĩa của từ này";
        } else {
            sNghia = wTuCanTim.getMeaning();
            //Lấy ngày hiện tại
            String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
            int isAdd = 0;
            int index = -1;
            if (listStatisticVA.getSize() == 0) {
                isAdd = 1;
            } else {
                for (int i = 0; i < size; i++) {
                    int element = listVA.getIndexElement(txtTuKhoaVtoA.getText());
                    if (listStatisticVA.getiIndexElement(i) == element
                            && listStatisticVA.getDateElement(i).equals(timeStamp)) {
                        isAdd = 2;
                        index = i;
                    }
                }
            }
            if (isAdd == 1) {
                wTuCanTim.setIndex(listVA.getIndexElement(txtTuKhoaVtoA.getText()));
                wTuCanTim.setCount(1);
                wTuCanTim.setDate(timeStamp);
                listStatisticVA.addWord(wTuCanTim);
            } else if (isAdd == 2) {
                int Count = listStatisticVA.findWordByIndex(index).getCount() + 1;
                listStatisticVA.findWordByIndex(index).setCount(Count);
            } else if (isAdd == 0) {
                wTuCanTim.setIndex(listVA.getIndexElement(txtTuKhoaVtoA.getText()));
                wTuCanTim.setCount(1);
                wTuCanTim.setDate(timeStamp);
                listStatisticVA.addWord(wTuCanTim);
            }
            try {
                listStatisticVA.writeFile("./ThongKe/ThongKe.txt", 1);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        txtNghiaVtoA.setText(sNghia);
    }//GEN-LAST:event_btnTimKiemVtoAActionPerformed
    //Sự kiện bấm nút enter Vietnamese - English
    private void txtTuKhoaVtoAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTuKhoaVtoAKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                listStatisticVA.readFile("./ThongKe/ThongKe.txt", 1);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            int size = listStatisticVA.getSize();

            String sNghia;
            Word wTuCanTim = new Word();
            txtNghiaVtoA.setLineWrap(true);
            String sTuKhoa = txtTuKhoaVtoA.getText();
            wTuCanTim = listVA.findWord(sTuKhoa);
            if (wTuCanTim == null) {
                sNghia = "Không tìm thấy nghĩa của từ này";
            } else {
                sNghia = wTuCanTim.getMeaning();
                //Lấy ngày hiện tại
                String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
                int isAdd = 0;
                int index = -1;
                if (listStatisticVA.getSize() == 0) {
                    isAdd = 1;
                } else {
                    for (int i = 0; i < size; i++) {
                        int element = listVA.getIndexElement(txtTuKhoaVtoA.getText());
                        if (listStatisticVA.getiIndexElement(i) == element
                                && listStatisticVA.getDateElement(i).equals(timeStamp)) {
                            isAdd = 2;
                            index = i;
                        }
                    }
                }
                if (isAdd == 1) {
                    wTuCanTim.setIndex(listVA.getIndexElement(txtTuKhoaVtoA.getText()));
                    wTuCanTim.setCount(1);
                    wTuCanTim.setDate(timeStamp);
                    listStatisticVA.addWord(wTuCanTim);
                } else if (isAdd == 2) {
                    int Count = listStatisticVA.findWordByIndex(index).getCount() + 1;
                    listStatisticVA.findWordByIndex(index).setCount(Count);
                } else if (isAdd == 0) {
                    wTuCanTim.setIndex(listVA.getIndexElement(txtTuKhoaVtoA.getText()));
                    wTuCanTim.setCount(1);
                    wTuCanTim.setDate(timeStamp);
                    listStatisticVA.addWord(wTuCanTim);
                }
                try {
                    listStatisticVA.writeFile("./ThongKe/ThongKe.txt", 1);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            txtNghiaVtoA.setText(sNghia);
        }
    }//GEN-LAST:event_txtTuKhoaVtoAKeyPressed
    //Sự kiện bấm nút thêm vào yêu thích Vietnamese - English
    private void btnThichVtoAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThichVtoAActionPerformed

        try {
            listLikeVA.readFile("./TuDaThich/Tu_Da_Thich.txt", 0);
            listLikeAV.readFile("./TuDaThich/Tu_Da_Thich2.txt", 0);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        int element = listVA.getIndexElement(txtTuKhoaVtoA.getText());
        if (txtNghiaVtoA.getText().equals("")
                || txtNghiaVtoA.getText().equals("Không tìm thấy nghĩa của từ này")) {
            JOptionPane.showMessageDialog(rootPane, "Từ này không tồn tại nên không thể thêm mới"
                    + ", vui lòng thử lại");
        } else {
            if (element == -1) {
                JOptionPane.showMessageDialog(rootPane, "Bấm tìm kiếm trước khi thêm từ yêu thích");
            } else if (listVA.getMeaningElement(element).equals(txtNghiaVtoA.getText())) {
                int isExist = 0;
                for (int i = 0; i < listLikeVA.getSize(); i++) {
                    if (listLikeVA.getiIndexElement(i) == element) {
                        isExist = 1;
                    }
                }
                if (isExist == 0) {
                    Word w = new Word();
                    w.setIndex(element);
                    listLikeVA.addWord(w);
                    try {
                        listLikeVA.writeFile("./TuDaThich/Tu_Da_Thich.txt", 0);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    JOptionPane.showMessageDialog(rootPane, "Thêm thành công");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Từ nãy đã tồn tại trong"
                            + " danh sách từ yêu thích, vui lòng thử từ khác!");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Bấm tìm kiếm trước khi thêm từ yêu thích");
            }

        }
    }//GEN-LAST:event_btnThichVtoAActionPerformed
    //Sự kiện form load: load một số file cần thiết ban đầu
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            listAV.readXML("./TuDien/Anh_Viet.xml");
            listVA.readXML("./TuDien/Viet_Anh.xml");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowActivated
    //Sự kiện bấm enter tại từ khóa English - Vietnamese
    private void txtTuKhoaAtoVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTuKhoaAtoVKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                listStatisticAV.readFile("./ThongKe/ThongKe2.txt", 1);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            int size = listStatisticAV.getSize();

            String sNghia;
            Word wTuCanTim = new Word();
            txtNghiaAtoV.setLineWrap(true);
            String sTuKhoa = txtTuKhoaAtoV.getText();
            wTuCanTim = listAV.findWord(sTuKhoa);
            if (wTuCanTim == null) {
                sNghia = "Không tìm thấy nghĩa của từ này";
            } else {
                sNghia = wTuCanTim.getMeaning();
                //Lấy ngày hiện tại
                String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
                int isAdd = 0;
                int index = -1;
                if (listStatisticAV.getSize() == 0) {
                    isAdd = 1;
                } else {
                    for (int i = 0; i < size; i++) {
                        int element = listAV.getIndexElement(txtTuKhoaAtoV.getText());
                        if (listStatisticAV.getiIndexElement(i) == element
                                && listStatisticAV.getDateElement(i).equals(timeStamp)) {
                            isAdd = 2;
                            index = i;
                        }
                    }
                }
                if (isAdd == 1) {
                    wTuCanTim.setIndex(listAV.getIndexElement(txtTuKhoaAtoV.getText()));
                    wTuCanTim.setCount(1);
                    wTuCanTim.setDate(timeStamp);
                    listStatisticAV.addWord(wTuCanTim);
                } else if (isAdd == 2) {
                    int Count = listStatisticAV.findWordByIndex(index).getCount() + 1;
                    listStatisticAV.findWordByIndex(index).setCount(Count);
                } else if (isAdd == 0) {
                    wTuCanTim.setIndex(listAV.getIndexElement(txtTuKhoaAtoV.getText()));
                    wTuCanTim.setCount(1);
                    wTuCanTim.setDate(timeStamp);
                    listStatisticAV.addWord(wTuCanTim);
                }
                try {
                    listStatisticAV.writeFile("./ThongKe/ThongKe2.txt", 1);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            txtNghiaAtoV.setText(sNghia);
        }
    }//GEN-LAST:event_txtTuKhoaAtoVKeyPressed
    //Sự kiện bấm btn tìm kiếm English - Vietnamese
    private void btnTimKiemAtoVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemAtoVActionPerformed
        try {
            listStatisticAV.readFile("./ThongKe/ThongKe2.txt", 1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        int size = listStatisticAV.getSize();

        String sNghia;
        Word wTuCanTim = new Word();
        txtNghiaAtoV.setLineWrap(true);
        String sTuKhoa = txtTuKhoaAtoV.getText();
        wTuCanTim = listAV.findWord(sTuKhoa);
        if (wTuCanTim == null) {
            sNghia = "Không tìm thấy nghĩa của từ này";
        } else {
            sNghia = wTuCanTim.getMeaning();
            //Lấy ngày hiện tại
            String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
            int isAdd = 0;
            int index = -1;
            if (listStatisticAV.getSize() == 0) {
                isAdd = 1;
            } else {
                for (int i = 0; i < size; i++) {
                    int element = listAV.getIndexElement(txtTuKhoaAtoV.getText());
                    if (listStatisticAV.getiIndexElement(i) == element
                            && listStatisticAV.getDateElement(i).equals(timeStamp)) {
                        isAdd = 2;
                        index = i;
                    }
                }
            }
            if (isAdd == 1) {
                wTuCanTim.setIndex(listAV.getIndexElement(txtTuKhoaAtoV.getText()));
                wTuCanTim.setCount(1);
                wTuCanTim.setDate(timeStamp);
                listStatisticAV.addWord(wTuCanTim);
            } else if (isAdd == 2) {
                int Count = listStatisticAV.findWordByIndex(index).getCount() + 1;
                listStatisticAV.findWordByIndex(index).setCount(Count);
            } else if (isAdd == 0) {
                wTuCanTim.setIndex(listAV.getIndexElement(txtTuKhoaAtoV.getText()));
                wTuCanTim.setCount(1);
                wTuCanTim.setDate(timeStamp);
                listStatisticAV.addWord(wTuCanTim);
            }
            try {
                listStatisticAV.writeFile("./ThongKe/ThongKe2.txt", 1);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        txtNghiaAtoV.setText(sNghia);
    }//GEN-LAST:event_btnTimKiemAtoVActionPerformed
    //Sự kiện bấm btn thêm vào yêu thích English - Vietnamese
    private void btnThichAtoVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThichAtoVActionPerformed
        try {
            listLikeAV.readFile("./TuDaThich/Tu_Da_Thich2.txt", 0);
            listLikeVA.readFile("./TuDaThich/Tu_Da_Thich.txt", 0);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        int element = listAV.getIndexElement(txtTuKhoaAtoV.getText());
        if (txtNghiaAtoV.getText().equals("")
                || txtNghiaAtoV.getText().equals("Không tìm thấy nghĩa của từ này")) {
            JOptionPane.showMessageDialog(rootPane, "Từ này không tồn tại nên không thể thêm mới"
                    + ", vui lòng thử lại");
        } else {
            int isExist = 0;
            for (int i = 0; i < listLikeAV.getSize(); i++) {
                if (listLikeAV.getiIndexElement(i) == element) {
                    isExist = 1;
                }
            }
            if (isExist == 0) {
                Word w = new Word();
                w.setIndex(element);
                listLikeAV.addWord(w);
                try {
                    listLikeAV.writeFile("./TuDaThich/Tu_Da_Thich2.txt", 0);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                JOptionPane.showMessageDialog(rootPane, "Thêm thành công");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Từ nãy đã tồn tại trong"
                        + " danh sách từ yêu thích, vui lòng thử từ khác!");
            }
        }
    }//GEN-LAST:event_btnThichAtoVActionPerformed
    //Sự kiện form close
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        JOptionPane.showMessageDialog(rootPane, "Cảm ơn bạn đã sử dụng chương "
                + "trình... Chúc bạn vui vẻ!");
    }//GEN-LAST:event_formWindowClosing
    //Sự kiện load dữ liệu từ đã thích
    private void btnThichAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_btnThichAncestorAdded
        try {
            listLikeAV.readFile("./TuDaThich/Tu_Da_Thich2.txt", 0);
            listLikeVA.readFile("./TuDaThich/Tu_Da_Thich.txt", 0);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtThich.setLineWrap(true);
        String sShow = "***** DANH SÁCH TỪ TIẾNG ANH *****\n";
        String sWord = null;
        String sMeaning = null;
        int pos = 0;
        for (int i = 0; i < listLikeAV.getSize(); i++) {
            pos = i + 1;
            int iIndex = listLikeAV.getiIndexElement(i);
            sWord = listAV.getWordElement(iIndex);
            sMeaning = listAV.getMeaningElement(iIndex);
            sShow += "Từ thứ " + pos + ": " + sWord + "\n" + sMeaning + "\n";
        }
        sShow += "***** DANH SÁCH TỪ TIẾNG VIỆT *****\n";
        pos = 0;
        for (int i = 0; i < listLikeVA.getSize(); i++) {
            pos = i + 1;
            int iIndex = listLikeVA.getiIndexElement(i);
            sWord = listVA.getWordElement(iIndex);
            sMeaning = listVA.getMeaningElement(iIndex);
            sShow += "Từ thứ " + pos + ": " + sWord + "\n" + sMeaning + "\n";
        }
        txtThich.setText(sShow);
    }//GEN-LAST:event_btnThichAncestorAdded
    //Sự kiện bấm nút từ đã tra
    private void btnDaTraAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_btnDaTraAncestorAdded
        try {
            listStatisticVA.readFile("./ThongKe/ThongKe.txt", 1);
            listStatisticAV.readFile("./ThongKe/ThongKe2.txt", 1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        ArrayList<String> sDate = new ArrayList<String>();
        int isAdd = 1;
        txtDaTra.setLineWrap(true);
        cbNgayBD.removeAllItems();
        cbNgayKT.removeAllItems();
        for (int i = 0; i < listStatisticVA.getSize(); i++) {
            if (sDate.size() == 0) {
                sDate.add(listStatisticVA.getDateElement(i));
            } else {
                for (int j = 0; j < sDate.size(); j++) {
                    if (listStatisticVA.getDateElement(i).equals(sDate.get(j))) {
                        isAdd = 0;
                    }
                }
                if (isAdd == 1) {
                    sDate.add(listStatisticVA.getDateElement(i));
                }
            }
        }

        isAdd = 1;
        for (int i = 0; i < listStatisticAV.getSize(); i++) {
            if (sDate.size() == 0) {
                sDate.add(listStatisticAV.getDateElement(i));
            } else {
                for (int j = 0; j < sDate.size(); j++) {
                    if (listStatisticAV.getDateElement(i).equals(sDate.get(j))) {
                        isAdd = 0;
                    }
                }
                if (isAdd == 1) {
                    sDate.add(listStatisticAV.getDateElement(i));
                }
            }
        }
        for (int i = 0; i < sDate.size(); i++) {
            cbNgayBD.addItem(sDate.get(i));
            cbNgayKT.addItem(sDate.get(i));
        }
    }//GEN-LAST:event_btnDaTraAncestorAdded
    //Sự kiện bấm nút xem trên đã tra
    private void btnXemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemActionPerformed
        String sShow = "***** Các Từ tiếng Việt *****\n";
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        String dateBDInString = (String) cbNgayBD.getSelectedItem();
        String dateKTInString = (String) cbNgayKT.getSelectedItem();
        int idateBD = Integer.parseInt(dateBDInString.substring(6, 10)
                + dateBDInString.substring(3, 5)
                + dateBDInString.substring(0, 2));
        int idateKT = Integer.parseInt(dateKTInString.substring(6, 10)
                + dateKTInString.substring(3, 5)
                + dateKTInString.substring(0, 2));
        int iDate = -1;
        for (int i = 0; i < listStatisticVA.getSize(); i++) {
            String date = listStatisticVA.getDateElement(i);
            iDate = Integer.parseInt(date.substring(6, 10)
                    + date.substring(3, 5)
                    + date.substring(0, 2));
            if (iDate >= idateBD && iDate <= idateKT) {
                sShow += "Số lần tra: " + listStatisticVA.getCountElement(i) + "\n" + listVA.getWordElement(listStatisticVA.getiIndexElement(i))
                        + "\n" + listVA.getMeaningElement(listStatisticVA.getiIndexElement(i));
            }
        }
        sShow += "***** Các từ tiếng Anh *****\n";
        for (int i = 0; i < listStatisticAV.getSize(); i++) {
            String date = listStatisticAV.getDateElement(i);
            iDate = Integer.parseInt(date.substring(6, 10)
                    + date.substring(3, 5)
                    + date.substring(0, 2));
            if (iDate >= idateBD && iDate <= idateKT) {
                sShow += "Số lần tra: " + listStatisticVA.getCountElement(i) + "\n" + listAV.getWordElement(listStatisticAV.getiIndexElement(i))
                        + "\n" + listAV.getMeaningElement(listStatisticAV.getiIndexElement(i));
            }
        }
        txtDaTra.setText(sShow);
    }//GEN-LAST:event_btnXemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Main().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnDaTra;
    private javax.swing.JPanel btnEtoV;
    private javax.swing.JPanel btnThich;
    private javax.swing.JButton btnThichAtoV;
    private javax.swing.JButton btnThichVtoA;
    private javax.swing.JButton btnTimKiemAtoV;
    private javax.swing.JButton btnTimKiemVtoA;
    private javax.swing.JPanel btnTraCuu;
    private javax.swing.JPanel btnVtoE;
    private javax.swing.JButton btnXem;
    private javax.swing.JComboBox cbNgayBD;
    private javax.swing.JComboBox cbNgayKT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane main;
    private javax.swing.JTextArea txtDaTra;
    private javax.swing.JTextArea txtNghiaAtoV;
    private javax.swing.JTextArea txtNghiaVtoA;
    private javax.swing.JTextArea txtThich;
    private javax.swing.JTextField txtTuKhoaAtoV;
    private javax.swing.JTextField txtTuKhoaVtoA;
    // End of variables declaration//GEN-END:variables

}
